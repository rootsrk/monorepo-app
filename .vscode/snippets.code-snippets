{
  // Place your workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Generate default react router functions": {
    "scope": "typescriptreact",
    "prefix": "routeMethods",
    "description": "Generate default react router functions",
    "body": [
      "import type { ActionFunctionArgs, LoaderFunctionArgs } from 'react-router-dom';",
      "",
      "export function ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Route() {",
      "  return <>Behold the ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} route</>;",
      "}",
      "",
      "export async function ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}Loader({ request }: LoaderFunctionArgs) {",
      "  console.log('${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}Loader', { request });",
      "  return {};",
      "}",
      "",
      "export async function ${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}Action({ request }: ActionFunctionArgs) {",
      "  console.log('${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}Action', { request });",
      "  return {};",
      "}",
      "$0<Route path=\"${TM_FILENAME_BASE}\"",
      "loader={${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}Loader}",
      "action={${TM_FILENAME_BASE/(.*)/${1:/camelcase}/}Action}",
      "element={<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Route />}",
      " />"
    ]
  },
  "Import React Intl apis": {
    "scope": "typescriptreact",
    "prefix": "intlFormat",
    "description": "import the imperative react-intl api",
    "body": "const { formatMessage } = useIntl$0();"
  },
  "Navigate to url": {
    "scope": "typescriptreact",
    "prefix": "navigateToURL",
    "description": "navigate programmatically to a specific URL",
    "body": "const navigate = useNavigate$0();"
  }
}
